@using ScubaDiver
@using ScubaDiver.API
@using ScubaInstructor.Helpers
@model ScubaDiver.API.ObjectDump
<style>
    body {
        padding: 50px;
        background: #fff;
    }

    .wrapper {
        width: 70%;
    }

    @@media(max-width:992px) {
        .wrapper {
            width: 100%;
        }
    }

    .panel-heading {
        padding: 0;
        border: 0;
    }

    .panel-title > a, .panel-title > a:active {
        display: block;
        padding: 15px;
        color: #555;
        font-size: 16px;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        word-spacing: 3px;
        text-decoration: none;
    }

    .panel-heading a:before {
        font-family: 'Glyphicons Halflings';
        content: "\e114";
        float: right;
        transition: all 0.5s;
    }

    .panel-heading.active a:before {
        -webkit-transform: rotate(180deg);
        -moz-transform: rotate(180deg);
        transform: rotate(180deg);
    }
</style>
<script>
    $('.panel-collapse').on('show.bs.collapse', function () {
        $(this).siblings('.panel-heading').addClass('active');
    });

    $('.panel-collapse').on('hide.bs.collapse', function () {
        $(this).siblings('.panel-heading').removeClass('active');
    });
</script>
<div class="row">
    <h2>Object Dump</h2>
    <h4>Address: @Model.Address</h4>
    <h4>FullTypeFullNameName: <a href="/type/index?name=@Model.Type">@Model.Type</a></h4>
    @{ bool isPrimitive = @Model.PrimitiveValue != null;}
    <p>Is Primitive? @isPrimitive.ToString()</p>
    @if (isPrimitive)
    {
        <p>Primitive Value: @Model.PrimitiveValue</p>
    }
    else
    {
        <p>Fields:</p>
        <ul>
            @if (Model.Fields != null)
            {

                foreach (var field in Model.Fields)
                {
                    if (field.HasEncodedValue)
                    {
                        <li>
                            <text style="font-weight: bold">@field.Name</text> = <text style="color: green">@field.EncodedValue</text>
                        </li>
                    }
                    else
                    {
                        <li>
                            <text style="font-weight: bold">@field.Name</text> = <text style="color: darkred">ERROR</text>
                            <div class="panel panel-default">
                                <div class="panel-heading" role="tab" id="headingTwo">
                                    <h6 class="panel-title">
                                        <a style="font-size: 14px" class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                            @field.RetrivalError
                                        </a>
                                    </h6>
                                </div>
                                <div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                                    <div class="panel-body">
                                        <text style="color: darkred">@field.EncodedValue</text>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                }
            }
        </ul>
        <p>Properties:</p>
        <ul>
            @if (Model.Properties != null)
            {
                foreach (var prop in Model.Properties)
                {
                    <li>
                        <text style="font-weight: bold">@prop.Name</text> = <text style="color: green">@prop.EncodedValue</text>
                    </li>
                }
            }
        </ul>
    }
    <p>Methods:</p>
    @{
        TypeDump td = null;
        if (!TypesCache.Instance.TryGetCached(@Model.Type, out td))
        {
            TypesCache.Instance.TryResolve(@Model.Type, out td);
        }
        if (td != null)
        {
            <ol>
                @foreach (var member in td.Methods)
                {
                    <li>
                        <text>@member.Visibility @member.ReturnTypeFullName <a href="invoke/index?obj=@Model.Address&method=@member.Name">@member.Name</a></text>
                        @if (member.Parameters.Count == 0)
                        {
                            <text>()</text>
                        }
                        else
                        {
                            <text>(</text>
                            for (int i = 0; i < member.Parameters.Count; i++)
                            {
                                <text>@member.Parameters[i].Type @member.Parameters[i].Name</text>
                                if (i != member.Parameters.Count - 1)
                                {
                                    <text>, </text>
                                }
                            }
                            <text>)</text>
                        }
                    </li>
                }
            </ol>
            if (td.ParentDump != null)
            {
                <text>Inherited Methods:</text>
                <ol>

                @{ TypeDump currAncestor = td.ParentDump; }
                @while (currAncestor != null)
                {

                    foreach (var member in currAncestor.Methods)
                    {
                        <li>
                            <text>@member.Visibility @member.ReturnTypeFullName <a href="invoke/index?obj=@Model.Address&method=@member.Name">@member.Name</a></text>
                            @if (member.Parameters.Count == 0)
                            {
                                <text>()</text>
                            }
                            else
                            {
                                <text>(</text>
                                for (int i = 0; i < member.Parameters.Count; i++)
                                {
                                    <text>@member.Parameters[i].Type @member.Parameters[i].Name</text>
                                    if (i != member.Parameters.Count - 1)
                                    {
                                        <text>, </text>
                                    }
                                }
                                <text>)</text>
                            }
                        </li>
                    }
                    currAncestor = currAncestor.ParentDump;
                }
                </ol>
            }
        }
        else
        {
            <text> ERROR: Failed to retrieve dump of type</text>
        }
    }
</div>
