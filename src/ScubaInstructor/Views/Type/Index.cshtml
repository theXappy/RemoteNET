@using ScubaDiver
@model TypeDump
<div class="row">
    <h2>Name: @Model.Type</h2>
    <h4>Assembly: <a href="/types/index?assembly=@Model.Assembly">@Model.Assembly</a></h4>
    <p>Properties:</p>
    <ol>
        @foreach (var member in Model.Properties)
        {
            <li>
                <text style="font-weight: bold">@member.Name</text> -
                @if (String.IsNullOrEmpty(member.GetVisibility))
                {
                    <text>Getter(</text>@member.GetVisibility<text>)</text>
                }
                @if (String.IsNullOrEmpty(member.SetVisibility))
                {
                    if (String.IsNullOrEmpty(member.GetVisibility))
                    {
                        <text>, </text>
                    }
                    <text>Setter(</text>@member.SetVisibility<text>),</text>
                }
            </li>
        }
    </ol>
    <p>Fields:</p>
    <ol>
        @foreach (var member in Model.Fields)
        {
            <li>
                <text style="font-weight: bold">@member.Name</text> -
                @member.Visibility
            </li>
        }
    </ol>
    <p>Methods:</p>
    <ol>
        @foreach (var member in Model.Methods)
        {
            <li>
                @member.Visibility <text style="color: lightseagreen">@member.ReturnTypeFullName</text> <text style="font-weight: bold">@member.Name.Trim(' ')</text> (
                    @for (int i = 0; i < member.Parameters.Count; i++)
                    {
                        string paramSuffix = (i != member.Parameters.Count -1) ? "," : "";

                        <text><text style="color: lightseagreen">@member.Parameters[i].Type</text> @member.Parameters[i].Name@paramSuffix</text>
                    }
                <text>)</text>
            </li>
        }
    </ol>
</div>
